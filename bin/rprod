#!/usr/bin/env python3

__version__ = "0.0"

import argparse
import sys
import os
from pathlib import Path
import subprocess
import glob
import json

from rprod_bash.message import set_verbosity, message as msg
from rprod_bash.commandmode import guess_arguments

parser = argparse.ArgumentParser()
parser.add_argument(
    "-v",
    dest="verbosity",
    help="""Verbose mode.
Multiple -v options increase the verbosity. The maximum is 3""",
    action="count",
    default=0,
)
parser.add_argument(
    "-q", dest="verbosity", help="Quiet mode", action="store_const", const=-1
)

parser.add_argument(
    "-g1",
    help="""Disable file/value guess rule 1.
This rule states that any argument with a file extension must exist as a file.""",
    action="store_true",
)

parser.add_argument(
    "-g2",
    help="""Disable file/value guess rule 2.
This rule states that any argument without file extension must not exist as a file.""",
    action="store_true",
)

parser.add_argument(
    "--wait",
    help="Wait for earlier rprod commands",
    dest="action",
    action="store_const",
    const="wait",
)

arguments = sys.argv[1:]
command = []
for n, arg in enumerate(sys.argv[1:]):
    if not arg.startswith("-"):
        arguments = sys.argv[1 : n + 1]
        command = sys.argv[n + 1 :]
        break

reformat_wait = False
if command == ["wait"]:
    command = []
    arguments.append("--wait")
    reformat_wait = True

args = parser.parse_args(arguments)
verbosity = min(args.verbosity, 3)
set_verbosity(verbosity)
msg(1, "Verbosity set to {}".format(verbosity))

msg(1, "rprod {}".format(__version__))

if reformat_wait:
    msg(1, "'rprod wait' reformatted to 'rprod --wait'")
if args.action is not None:
    assert args.action in ["wait"], args.action
    if args.action == "wait":
        msg(0, "Action set to WAIT")
        raise NotImplementedError  # wait action

if len(command) == 0:
    # TODO: check for --wait and similar
    parser.print_usage()  # TODO: add to usage message
    sys.exit(0)


def _get_rprodfile(path: Path) -> Path or None:
    rprodfiles = [Path(path.as_posix() + ".rprod")]
    stem, suffix = os.path.splitext(path.as_posix())
    if stem != path.as_posix():
        rprodfiles.append(Path(stem + ".rprod"))
    if len(suffix):
        rprodfiles.append(Path(stem + ".rprod" + suffix))
    for rprodfile in rprodfiles:
        msg(3, "search rprodfile... : {}".format(rprodfile.as_posix()))
        if rprodfile.exists():
            msg(3, "rprodfile found")
            return rprodfile
        else:
            msg(3, "rprodfile not found")
    rprodfiles = glob.glob("{}.rprod.*".format(stem))
    msg(3, "glob search rprodfile... : {}.rprod.*".format(stem))
    if len(rprodfiles):
        rprodfile = rprodfiles[0]
        msg(3, "rprodfile '{}' found via glob search".format(rprodfile))
        return Path(rprodfile)


msg(1, "determine mode: COMMAND or WORKSPACE")

rprodfile = None
workspace_script_argindex = None

arg1 = Path(command[0])
if not arg1.exists():
    execarg1 = subprocess.getoutput("which {}".format(arg1.as_posix())).strip()
    if execarg1:
        msg(
            3,
            "first argument '{}' is in PATH, map to '{}'".format(
                arg1.as_posix(), execarg1
            ),
        )
        arg1 = Path(execarg1)
if arg1.exists():
    rprodfile = _get_rprodfile(arg1)
    if rprodfile is None:
        msg(2, "first argument '{}' has no rprodfile".format(arg1.as_posix()))
    else:
        msg(
            1,
            "found rprodfile '{}' for first argument '{}'".format(
                rprodfile, arg1.as_posix()
            ),
        )
        msg(0, "select first argument as workspace script")
        workspace_script_argindex = 1
else:
    msg(1, "first argument '{}' is not a file".format(arg1.as_posix()))

if rprodfile is None and len(command) > 1 and not arg1.suffix:
    msg(3, "first argument has no suffix, consider second argument for rprodfile")
    arg2 = Path(command[1])
    if len(arg2.suffix):
        msg(
            3,
            "second argument '{}' has a suffix, look for rprodfile".format(
                arg2.as_posix()
            ),
        )
    if arg2.exists():
        rprodfile = _get_rprodfile(arg2)
        if rprodfile is None:
            msg(2, "second argument '{}' has no rprodfile".format(arg2.as_posix()))
        else:
            msg(
                1,
                "found rprodfile '{}' for second argument '{}'".format(
                    rprodfile, arg2.as_posix()
                ),
            )
            msg(0, "select second argument as workspace script")
            workspace_script_argindex = 2

if rprodfile is None:
    msg(2, "no rprodfile found")
    msg(1, "select COMMAND mode")
    overrule_ext, overrule_no_ext = False, False
    if args.g1:
        msg(1, "disable file/value guess rule 1")
        overrule_ext = True
    if args.g2:
        msg(1, "disable file/value guess rule 2")
        overrule_no_ext = True
    try:
        argdict = guess_arguments(
            command, overrule_ext=overrule_ext, overrule_no_ext=overrule_no_ext
        )
    except ValueError as exc:
        msg(-1, *exc.args)
        sys.exit(1)
    argdictstr = json.dumps(argdict, sort_keys=True, indent=2)
    msg(1, "argument dict:\n" + argdictstr)
else:
    assert workspace_script_argindex
    msg(1, "select WORKSPACE mode")
    raise NotImplementedError  # workspace mode
